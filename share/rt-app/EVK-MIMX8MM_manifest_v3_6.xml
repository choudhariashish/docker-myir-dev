<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_EVK-MIMX8MM" name="EVK-MIMX8MM" brief="This is SDK version 2.8.0 manifest file. It describes the content of the EVK-MIMX8MM and additional settings for tools that support SDK version 2.8.0" format_version="3.6" api_version="2.0.0" configuration="8d1ab6c4b4a962f6d3348c6960a3bedb" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.6.xsd">
  <!--Timestamp (UTC): 2020-07-30 05:06:54.869466-->
  <!--This manifest is generated based on sdk repo commit: 5df5022c7426188357d0e69b4ff94b58f0d1b557-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="com.crt.advproject.config.exe.debug"/>
    <definition extID="com.crt.advproject.config.exe.release"/>
    <definition extID="QSPI_FLASH_MIMX8MM6xxxLZ"/>
  </externalDefinitions>
  <ksdk id="MCUXpresso280" name="MCUXpresso280" version="2.8.0" revision="366 2020-07-21"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings/>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.2.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
  </toolchains>
  <boards>
    <board id="evkmimx8mm" name="EVK-MIMX8MM" href="https://www.nxp.com/pip/8MMINILPD4-EVK" version="1.0.0" package="MIMX8MM6DVTLZ">
      <description>Evaluation Kit for the i.MX 8M Mini Applications Processor</description>
      <image path="MIR/marketing_data/1.0/boards/images" type="image">
        <files mask="144-EVK-MIMX8MM.jpg"/>
      </image>
      <examples>
        <example id="evkmimx8mm_cmsis_ecspi_int_loopback_transfer" name="cmsis_ecspi_int_loopback_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_ecspi_int_loopback_transfer example shows how to use CMSIS ECSPI driver in interrupt way: In this example , ECSPI will do a loopback transfer in interrupt way, so, there is no need to set up any pins.And we should set the ECSPIx-&gt;TESTREG[LBC] bit, this bit is used in Master mode only. When this bit is set, the ECSPI connects the transmitter and receiver sections internally, and the data shifted out from the most-significant bit of the shift register is looped back into the least-significant bit of the Shift register.In this way, a self-test of the complete transmit/receive path can be made. The output pins are not affected, and the input pins are ignored." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/ecspi" path="boards/evkmimx8mm/cmsis_driver_examples/ecspi/int_loopback_transfer">
          <external path="boards/evkmimx8mm/cmsis_driver_examples/ecspi/int_loopback_transfer" type="xml">
            <files mask="cmsis_ecspi_int_loopback_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_cmsis_ecspi_sdma_loopback_transfer" name="cmsis_ecspi_sdma_loopback_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_ecspi_sdma_loopback_transfer example shows how to use CMSIS ECSPI driver in SDMA way: In this example , ECSPI will do a loopback transfer in SDMA way, so, there is no need to set up any pins.And we should set the ECSPIx-&gt;TESTREG[LBC] bit, this bit is used in Master mode only. When this bit is set, the ECSPI connects the transmitter and receiver sections internally, and the data shifted out from the most-significant bit of the shift register is looped back into the least-significant bit of the Shift register.In this way, a self-test of the complete transmit/receive path can be made. The output pins are not affected, and the input pins are ignored." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/ecspi" path="boards/evkmimx8mm/cmsis_driver_examples/ecspi/sdma_loopback_transfer">
          <external path="boards/evkmimx8mm/cmsis_driver_examples/ecspi/sdma_loopback_transfer" type="xml">
            <files mask="cmsis_ecspi_sdma_loopback_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_cmsis_ii2c_int_b2b_transfer_master" name="cmsis_ii2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/evkmimx8mm/cmsis_driver_examples/i2c/int_b2b_transfer/master">
          <external path="boards/evkmimx8mm/cmsis_driver_examples/i2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_ii2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_cmsis_ii2c_int_b2b_transfer_slave" name="cmsis_ii2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="boards/evkmimx8mm/cmsis_driver_examples/i2c/int_b2b_transfer/slave">
          <external path="boards/evkmimx8mm/cmsis_driver_examples/i2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_ii2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_cmsis_iuart_interrupt_transfer" name="cmsis_iuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/uart" path="boards/evkmimx8mm/cmsis_driver_examples/uart/interrupt_transfer">
          <external path="boards/evkmimx8mm/cmsis_driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="cmsis_iuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_cmsis_iuart_sdma_transfer" name="cmsis_iuart_sdma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_sdma_transfer example shows how to use uart cmsis driver with SDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/uart" path="boards/evkmimx8mm/cmsis_driver_examples/uart/sdma_transfer">
          <external path="boards/evkmimx8mm/cmsis_driver_examples/uart/sdma_transfer" type="xml">
            <files mask="cmsis_iuart_sdma_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ecspi_interrupt_b2b_transfer_master" name="ecspi_interrupt_b2b_transfer_master" brief="The ecspi_interrupt_b2b_transfer example shows how to use ECSPI driver in interrupt way:In this example , we need two boards, one board used as ECSPI master and another board used as ECSPI slave.The file 'ecspi_interrupt_b2b_transfer_master.c' includes the ECSPI master code.This example uses the transactional API in ECSPI driver.1. ECSPI master send/received data to/from ECSPI slave in interrupt . (ECSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mm/driver_examples/ecspi/interrupt_b2b_transfer/master">
          <external path="boards/evkmimx8mm/driver_examples/ecspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="ecspi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ecspi_interrupt_b2b_transfer_slave" name="ecspi_interrupt_b2b_transfer_slave" brief="The ecspi_interrupt_b2b_transfer example shows how to use ECSPI driver in interrupt way:In this example , we need two boards, one board used as ECSPI master and another board used as ECSPI slave.The file 'ecspi_interrupt_b2b_transfer_slave.c' includes the ECSPI slave code.This example uses the transactional API in ECSPI driver.1. ECSPI master send/received data to/from ECSPI slave in interrupt . (ECSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mm/driver_examples/ecspi/interrupt_b2b_transfer/slave">
          <external path="boards/evkmimx8mm/driver_examples/ecspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="ecspi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ecspi_loopback" name="ecspi_loopback" brief="The ecspi_loopback demo shows how the ecspi do a loopback transfer internally.The ECSPI connects the transmitter and receiver sections internally, and the data shifted out from the most-significant bit of the shift register is looped back into the least-significant bit of the Shift register. In this way, a self-test of the complete transmit/receive path can be made. The output pins are not affected, and the input pins are ignored." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mm/driver_examples/ecspi/ecspi_loopback">
          <external path="boards/evkmimx8mm/driver_examples/ecspi/ecspi_loopback" type="xml">
            <files mask="ecspi_loopback.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ecspi_polling_b2b_transfer_master" name="ecspi_polling_b2b_transfer_master" brief="The ecspi_polling_b2b_transfer example shows how to use ECSPI driver in polling way:In this example , we need two boards, one board used as ECSPI master and another board used as ECSPI slave.The file 'ecspi_polling_b2b_transfer_master.c' includes the ECSPI master code.1. ECSPI master send/received data to/from ECSPI slave in polling . (ECSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mm/driver_examples/ecspi/polling_b2b_transfer/master">
          <external path="boards/evkmimx8mm/driver_examples/ecspi/polling_b2b_transfer/master" type="xml">
            <files mask="ecspi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ecspi_polling_b2b_transfer_slave" name="ecspi_polling_b2b_transfer_slave" brief="The ecspi_polling_b2b_transfer example shows how to use ECSPI driver in polling way:In this example , we need two boards, one board used as ECSPI master and another board used as ECSPI slave.The file 'ecspi_polling_b2b_transfer_slave.c' includes the ECSPI slave code.1. ECSPI master send/received data to/from ECSPI slave in polling . (ECSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ecspi" path="boards/evkmimx8mm/driver_examples/ecspi/polling_b2b_transfer/slave">
          <external path="boards/evkmimx8mm/driver_examples/ecspi/polling_b2b_transfer/slave" type="xml">
            <files mask="ecspi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_gpt_capture" name="gpt_capture" brief="The gpt_capture project is a simple demonstration program of the SDK GPT driver's input capture feature.The example sets up a GPT channel for rise-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpt" path="boards/evkmimx8mm/driver_examples/gpt/capture">
          <external path="boards/evkmimx8mm/driver_examples/gpt/capture" type="xml">
            <files mask="gpt_capture.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_gpt_timer" name="gpt_timer" brief="The gpt_timer project is a simple demonstration program of the SDK GPT driver. It sets up the GPThardware block to trigger a periodic interrupt after every 1 second. When the GPT interrupt is triggereda message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpt" path="boards/evkmimx8mm/driver_examples/gpt/timer">
          <external path="boards/evkmimx8mm/driver_examples/gpt/timer" type="xml">
            <files mask="gpt_timer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/evkmimx8mm/demo_apps/hello_world">
          <external path="boards/evkmimx8mm/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_igpio_led_output" name="igpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="boards/evkmimx8mm/driver_examples/gpio/led_output">
          <external path="boards/evkmimx8mm/driver_examples/gpio/led_output" type="xml">
            <files mask="igpio_led_output.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ii2c_interrupt_b2b_transfer_master" name="ii2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/evkmimx8mm/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="boards/evkmimx8mm/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="ii2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ii2c_interrupt_b2b_transfer_slave" name="ii2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/evkmimx8mm/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="boards/evkmimx8mm/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="ii2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ii2c_polling_b2b_transfer_master" name="ii2c_polling_b2b_transfer_master" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/evkmimx8mm/driver_examples/i2c/polling_b2b_transfer/master">
          <external path="boards/evkmimx8mm/driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="ii2c_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ii2c_polling_b2b_transfer_slave" name="ii2c_polling_b2b_transfer_slave" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/i2c" path="boards/evkmimx8mm/driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="boards/evkmimx8mm/driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="ii2c_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_ipwm" name="ipwm" brief="The PWM project is a simple demonstration program of the SDK PWM driver. It sets up the PWM hardwareblock to output PWM signals on one PWM channel. The example also shows PWM duty cycle is increase or decrease.The FIFO empty interrupt is provided. A new value will be loaded into FIFO when FIFO empty status bit is set. The PWM will run at the last set duty-cycle setting if all the values of the FIFO has been utilized, until the FIFO is reloaded or the PWM is disabled. When a new value is written, the duty cycle changes after the current period is over.The outputs can be observed by oscilloscope." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pwm" path="boards/evkmimx8mm/driver_examples/pwm">
          <external path="boards/evkmimx8mm/driver_examples/pwm" type="xml">
            <files mask="ipwm.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_iuart_auto_baudrate_detect" name="iuart_auto_baudrate_detect" brief="The uart_auto_baudrate_detect example shows how to use uart auto baud rate detect feature:In this example, one uart instance connect to PC through uart. First, we should send characters a or A to board. The boars will set baud rate automatic. After baud rate has set, the board will send back all characters that PCsend to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mm/driver_examples/uart/auto_baudrate_detect">
          <external path="boards/evkmimx8mm/driver_examples/uart/auto_baudrate_detect" type="xml">
            <files mask="iuart_auto_baudrate_detect.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_iuart_idle_detect_sdma_transfer" name="iuart_idle_detect_sdma_transfer" brief="The uart_idle_detect_sdma example shows how to use uart driver in sdma way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Uart will receive 8 characters every time, but if the character is less then 8, the idleline interrupt will generate, and abort the SDMA receive operation, and send out the receivedcharacters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mm/driver_examples/uart/idle_detect_sdma_transfer">
          <external path="boards/evkmimx8mm/driver_examples/uart/idle_detect_sdma_transfer" type="xml">
            <files mask="iuart_idle_detect_sdma_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_iuart_interrupt" name="iuart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mm/driver_examples/uart/interrupt">
          <external path="boards/evkmimx8mm/driver_examples/uart/interrupt" type="xml">
            <files mask="iuart_interrupt.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_iuart_interrupt_rb_transfer" name="iuart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mm/driver_examples/uart/interrupt_rb_transfer">
          <external path="boards/evkmimx8mm/driver_examples/uart/interrupt_rb_transfer" type="xml">
            <files mask="iuart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_iuart_interrupt_transfer" name="iuart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mm/driver_examples/uart/interrupt_transfer">
          <external path="boards/evkmimx8mm/driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="iuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_iuart_polling" name="iuart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mm/driver_examples/uart/polling">
          <external path="boards/evkmimx8mm/driver_examples/uart/polling" type="xml">
            <files mask="iuart_polling.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_iuart_sdma_transfer" name="iuart_sdma_transfer" brief="The uart_sdma example shows how to use uart driver in sdma way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/uart" path="boards/evkmimx8mm/driver_examples/uart/sdma_transfer">
          <external path="boards/evkmimx8mm/driver_examples/uart/sdma_transfer" type="xml">
            <files mask="iuart_sdma_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_pdm_hwvad" name="pdm_hwvad" brief="The pdm_hwvad example shows how to use pdm driver with interrupt:In this example, one pdm instance playbacks the audio data stored in flash using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mm/driver_examples/pdm/pdm_hwvad">
          <external path="boards/evkmimx8mm/driver_examples/pdm/pdm_hwvad" type="xml">
            <files mask="pdm_hwvad.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_pdm_interrupt" name="pdm_interrupt" brief="The pdm_interrupt example shows how to use pdm driver with interrupt:In this example, one pdm instance playbacks the audio data stored in flash using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mm/driver_examples/pdm/pdm_interrupt">
          <external path="boards/evkmimx8mm/driver_examples/pdm/pdm_interrupt" type="xml">
            <files mask="pdm_interrupt.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_pdm_sai_interrupt" name="pdm_sai_interrupt" brief="The pdm_sdma_transfer example shows how to use pdm driver with interrupt:In this example, one sai instance loopback the audio data that recieve from PDM." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mm/driver_examples/pdm/pdm_sai_interrupt">
          <external path="boards/evkmimx8mm/driver_examples/pdm/pdm_sai_interrupt" type="xml">
            <files mask="pdm_sai_interrupt.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_pdm_sai_interrupt_transfer" name="pdm_sai_interrupt_transfer" brief="The pdm_sdma_transfer example shows how to use pdm driver with interrupt transaction api:In this example, one sai instance loopback the audio data that recieve from PDM." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mm/driver_examples/pdm/pdm_sai_interrupt_transfer">
          <external path="boards/evkmimx8mm/driver_examples/pdm/pdm_sai_interrupt_transfer" type="xml">
            <files mask="pdm_sai_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_pdm_sai_sdma" name="pdm_sai_sdma" brief="The pdm_sai_sdma example shows how to use pdm sdma driver together with sai sdma driver" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mm/driver_examples/pdm/pdm_sai_sdma">
          <external path="boards/evkmimx8mm/driver_examples/pdm/pdm_sai_sdma" type="xml">
            <files mask="pdm_sai_sdma.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_pdm_sdma_transfer" name="pdm_sdma_transfer" brief="The pdm_sdma_transfer example shows how to use pdm driver with SDMA" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/pdm" path="boards/evkmimx8mm/driver_examples/pdm/pdm_sdma_transfer">
          <external path="boards/evkmimx8mm/driver_examples/pdm/pdm_sdma_transfer" type="xml">
            <files mask="pdm_sdma_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_rdc" name="rdc" brief="The RDC example shows how to control the peripheral and memory regionasscess policy using RDC and RDC_SEMA42" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/evkmimx8mm/driver_examples/rdc">
          <external path="boards/evkmimx8mm/driver_examples/rdc" type="xml">
            <files mask="rdc.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_sai_interrupt_transfer" name="sai_interrupt_transfer" brief="The sai_interrupt_transfer example shows how to use sai driver with interrupt:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="boards/evkmimx8mm/driver_examples/sai/interrupt_transfer">
          <external path="boards/evkmimx8mm/driver_examples/sai/interrupt_transfer" type="xml">
            <files mask="sai_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_sai_sdma_transfer" name="sai_sdma_transfer" brief="The sai_sdma_transfer example shows how to use sai driver with SDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM/DDR using SDMA channel." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="boards/evkmimx8mm/driver_examples/sai/sdma_transfer">
          <external path="boards/evkmimx8mm/driver_examples/sai/sdma_transfer" type="xml">
            <files mask="sai_sdma_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_sdma_memory_to_memory" name="sdma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sdma" path="boards/evkmimx8mm/driver_examples/sdma/memory_to_memory">
          <external path="boards/evkmimx8mm/driver_examples/sdma/memory_to_memory" type="xml">
            <files mask="sdma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_sdma_scatter_gather" name="sdma_scatter_gather" brief="The SDMA scatter gather example is a simple demonstration program that uses the SDK software.It excuates several shots transfer from source buffer to destination buffer using the SDK SDMA drivers.The purpose of this example is to show how to use the SDMA and to provide a scatter gather example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sdma/scatter_gather" path="boards/evkmimx8mm/driver_examples/sdma/scatter_gather">
          <external path="boards/evkmimx8mm/driver_examples/sdma/scatter_gather" type="xml">
            <files mask="sdma_scatter_gather.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_sema4_uboot" name="sema4_uboot" brief="The sema4 uboot example shows how to use SEMA4 driver to lock and unlock a sema gate,the notification IRQ is also demonstrated in this example.This example should work together with uboot. This example runs on Cortex-M core,the uboot runs on the Cortex-A core." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sema4" path="boards/evkmimx8mm/driver_examples/sema4/uboot">
          <external path="boards/evkmimx8mm/driver_examples/sema4/uboot" type="xml">
            <files mask="sema4_uboot.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_tmu_1_monitor_threshold" name="tmu_1_monitor_threshold" brief="The TMU example shows how to configure TMU register to monitor and report the temperature from temperature measurement site located on the chip. It monitors the site and signals an alarm if a programmed threshold is ever exceeded." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tmu_1" path="boards/evkmimx8mm/driver_examples/tmu_1/monitor_threshold">
          <external path="boards/evkmimx8mm/driver_examples/tmu_1/monitor_threshold" type="xml">
            <files mask="tmu_1_monitor_threshold.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_tmu_1_temperature_polling" name="tmu_1_temperature_polling" brief="The TMU example shows how to configure TMU register to monitor and report the temperature from temperature measurement site located on the chip. It monitors the site and outputs the immediate/average temperature." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tmu_1" path="boards/evkmimx8mm/driver_examples/tmu_1/temperature_polling">
          <external path="boards/evkmimx8mm/driver_examples/tmu_1/temperature_polling" type="xml">
            <files mask="tmu_1_temperature_polling.xml"/>
          </external>
        </example>
        <example id="evkmimx8mm_wdog01" name="wdog01" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,implemented to test the wdog.And then after 10 times of refreshing the watchdog, a timeout reset is generated.We also try to refresh out of window to trigger reset after 10 times of refreshing.Please notice that because WDOG control registers are write-once only, so the WDOG_Init function and the WDOG_Disable function can be called only once after reset." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/wdog" path="boards/evkmimx8mm/driver_examples/wdog">
          <external path="boards/evkmimx8mm/driver_examples/wdog" type="xml">
            <files mask="wdog01.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MIMX8MM6xxxLZ" name="MIMX8MM6" version="1.0.0" full_name="MIMX8MM6xxxLZ" family="MIMX8MMx" platform="i.MX">
      <description>i.MX 8M Mini Quad</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="cm4_MIMX8MM6xxxLZ" name="cm4" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="SRAM_UPPER_MIMX8MM6xxxLZ" name="SRAM_UPPER" addr="20000000" size="00020000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MIMX8MM6xxxLZ" name="SRAM_LOWER" addr="1ffe0000" size="00020000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="0" ram_size_kb="256"/>
      <package id="MIMX8MM6DVTLZ" name="MIMX8MM6DVTLZ"/>
      <evaluation_boards>
        <evaluation_board name="evkmimx8mm"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.attach.slave.release.MIMX8MM6xxxLZ" name="internal.attach.slave" value="true"/>
            <params id="internal.multi.swd.release.MIMX8MM6xxxLZ" name="internal.multi.swd" value="true"/>
            <params id="internal.wiretype.release.MIMX8MM6xxxLZ" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MIMX8MM6xxxLZ" name="internal.has_swo" value="false"/>
          </params>
          <drivers>
            <driver id_refs="QSPI_FLASH_MIMX8MM6xxxLZ">
              <driverBinary type="binary">
                <files mask="flash_driver_placeholder.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.evkmimx8mm.MIMX8MM6" name="evkmimx8mm" brief="Board_project_template evkmimx8mm" version="1.0.0" full_name="Board_project_template evkmimx8mm" devices="MIMX8MM6xxxLZ" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="boards/evkmimx8mm/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/evkmimx8mm/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MIMX8MM6" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="MIMX8MM6xxxLZ" user_visible="true" type="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="platform.Include_dsp.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm1.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="Driver/DriverTemplates" type="src">
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_USBH.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MIMX8MM6" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8MM6" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MIMX8MM6" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MIMX8MM6" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MIMX8MM6" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMX8MM6" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MIMX8MM6" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MIMX8MM6" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MIMX8MM6" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMX8MM6" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMX8MM6" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8MM6" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MIMX8MM6" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MIMX8MM6" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MIMX8MM6" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="MIMX8MM6xxxLZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8MM6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
    </component>
    <component id="platform.Include_common.MIMX8MM6" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="MIMX8MM6xxxLZ" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm4.MIMX8MM6" name="CMSIS_Include_core_cm4" brief="Cmsis_include_core_cm4" version="5.3.0" full_name="Cmsis_include_core_cm4" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MIMX8MM6"/>
          <component_dependency value="platform.Include_dsp.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
    </component>
    <component id="platform.Include_dsp.MIMX8MM6" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="MIMX8MM6xxxLZ" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
    </component>
    <component id="COPY_BSD_License.MIMX8MM6" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="MIMX8MM6xxxLZ" user_visible="true" type="other">
      <source path="." target_path="src" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.MIMX8MM6.MIMX8MM6" name="MIMX8MM6" brief="Devices_project_template MIMX8MM6" version="1.0.0" full_name="Devices_project_template MIMX8MM6" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MIMX8MM6"/>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
          <component_dependency value="device.MIMX8MM6_CMSIS.MIMX8MM6"/>
          <component_dependency value="device.MIMX8MM6_startup.MIMX8MM6"/>
          <component_dependency value="platform.drivers.iuart.MIMX8MM6"/>
          <component_dependency value="platform.drivers.rdc.MIMX8MM6"/>
          <component_dependency value="platform.utilities.assert.MIMX8MM6"/>
          <component_dependency value="utility.debug_console.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/MIMX8MM6/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.MIMX8MM6" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="MIMX8MM6xxxLZ" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <source path="devices/MIMX8MM6/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.MIMX8MM6" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="MIMX8MM6xxxLZ" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="cmake_toolchain_files" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.ak4497_adapter.MIMX8MM6" name="codec_ak4497_adapter" brief="Component ak4497 adapter for single codec" version="2.2.0" full_name="Component ak4497_adapter" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.ak4497.MIMX8MM6"/>
          <component_dependency value="driver.codec.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="components/codec/port/ak4497" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port/ak4497" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.codec_ak4497_adapter.MIMX8MM6" name="codecs_ak4497_adapter" brief="Component ak4497 adapter for multi codecs" version="2.2.0" full_name="Component codec_ak4497_adapter" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.ak4497.MIMX8MM6"/>
          <component_dependency value="driver.codec.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="components/codec/port" target_path="codec" type="src">
        <files mask="fsl_ak4497_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port" target_path="codec" type="c_include">
        <files mask="fsl_ak4497_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.codec_i2c.MIMX8MM6" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
          <component_dependency value="component.ii2c_adapter.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="components/codec/i2c" target_path="codec" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source path="components/codec/i2c" target_path="codec" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
    </component>
    <component id="component.codec_wm8524_adapter.MIMX8MM6" name="codecs_wm8524_adapter" brief="Component wm8524 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8524_adapter" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8524.MIMX8MM6"/>
          <component_dependency value="driver.codec.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="components/codec/port" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
        <files mask="fsl_wm8524_adapter.c"/>
      </source>
      <source path="components/codec/port" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
        <files mask="fsl_wm8524_adapter.h"/>
      </source>
    </component>
    <component id="component.ii2c_adapter.MIMX8MM6" name="ii2c_adapter" brief="Component ii2c_adapter" version="1.0.0" full_name="Component ii2c_adapter" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
          <component_dependency value="platform.drivers.ii2c.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="components/i2c" target_path="component/i2c" type="c_include">
        <files mask="i2c.h"/>
      </source>
      <source path="components/i2c" target_path="component/i2c" type="src">
        <files mask="ii2c_adapter.c"/>
      </source>
    </component>
    <component id="component.iuart_adapter.MIMX8MM6" name="iuart_adapter" brief="Component iuart_adapter" version="1.0.0" full_name="iuart_adapter" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
          <component_dependency value="platform.drivers.iuart.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="iuart_adapter.c"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
    </component>
    <component id="component.lists.MIMX8MM6" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.serial_manager.MIMX8MM6" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
          <component_dependency value="component.lists.MIMX8MM6"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MIMX8MM6"/>
            <component_dependency value="component.serial_manager_swo.MIMX8MM6"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_swo.MIMX8MM6" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
          <component_dependency value="component.serial_manager.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_swo.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_swo.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MIMX8MM6" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MIMX8MM6xxxLZ" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <component_dependency value="platform.drivers.iuart.MIMX8MM6"/>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.wm8524_adapter.MIMX8MM6" name="codec_wm8524_adapter" brief="Component wm8524 adapter for single codec" version="2.2.0" full_name="Component wm8524_adapter" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8524.MIMX8MM6"/>
          <component_dependency value="driver.codec.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="components/codec/port/wm8524" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port/wm8524" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="device.MIMX8MM6_CMSIS.MIMX8MM6" name="MIMX8MM6_CMSIS" brief="Device MIMX8MM6_cmsis" version="1.0.0" full_name="Device MIMX8MM6_cmsis" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <component_dependency value="platform.Include_core_cm4.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6" target_path="device" type="c_include">
        <files mask="MIMX8MM6_cm4.h"/>
        <files mask="MIMX8MM6_cm4_features.h"/>
        <files mask="fsl_device_registers.h"/>
      </source>
    </component>
    <component id="device.MIMX8MM6_debugger.MIMX8MM6" name="MIMX8MM6_debugger" brief="Device MIMX8MM6_debugger" version="1.0.0" full_name="Device MIMX8MM6_debugger" devices="MIMX8MM6xxxLZ" user_visible="true" type="debugger">
      <source path="devices/MIMX8MM6" target_path="MIMX8MM6" type="xml">
        <files mask="MIMX8MM6_cm4.xml"/>
      </source>
    </component>
    <component id="platform.devices.MIMX8MM6_linker.MIMX8MM6" name="MIMX8MM6_linker" brief="Device MIMX8MM6_linker" version="1.0.0" full_name="Device MIMX8MM6_linker" devices="MIMX8MM6xxxLZ" user_visible="true" type="linker">
      <source toolchain="armgcc" path="devices/MIMX8MM6/gcc" target_path="MIMX8MM6/gcc" type="linker">
        <files mask="MIMX8MM6xxxxx_cm4_ddr_ram.ld"/>
        <files mask="MIMX8MM6xxxxx_cm4_flash.ld"/>
        <files mask="MIMX8MM6xxxxx_cm4_ram.ld"/>
      </source>
    </component>
    <component id="device.MIMX8MM6_startup.MIMX8MM6" name="MIMX8MM6_startup" brief="Device MIMX8MM6_startup" version="1.0.0" full_name="Device MIMX8MM6_startup" devices="MIMX8MM6xxxLZ" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="armgcc" path="devices/MIMX8MM6/gcc" target_path="startup" type="asm_include">
        <files mask="startup_MIMX8MM6_cm4.S"/>
      </source>
      <source path="devices/MIMX8MM6" target_path="device" type="src">
        <files mask="system_MIMX8MM6_cm4.c"/>
      </source>
      <source path="devices/MIMX8MM6" target_path="device" type="c_include">
        <files mask="system_MIMX8MM6_cm4.h"/>
      </source>
    </component>
    <component id="docs.MIMX8MM6.MIMX8MM6" name="MIMX8MM6" brief="Docs mimx8mm6" version="1.0.0" full_name="Docs mimx8mm6" devices="MIMX8MM6xxxLZ" user_visible="true" type="documentation">
      <source path="docs" target_path="docs" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for EVK-MIMX8MM.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for EVK-MIMX8MM.pdf"/>
      </source>
    </component>
    <component id="driver.ak4497.MIMX8MM6" name="ak4497" brief="Driver ak4497" version="2.1.0" full_name="Driver ak4497" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
          <component_dependency value="component.codec_i2c.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="components/codec/ak4497" target_path="codec" type="src">
        <files mask="fsl_ak4497.c"/>
      </source>
      <source path="components/codec/ak4497" target_path="codec" type="c_include">
        <files mask="fsl_ak4497.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MIMX8MM6" name="clock" brief="Clock Driver" version="2.2.1" full_name="Clock Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.ecspi_sdma_cmsis.MIMX8MM6" name="ecspi_sdma_cmsis" brief="ECSPI CMSIS SDMA Driver" version="2.0.0" full_name="ECSPI CMSIS SDMA Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.ecspi_sdma.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="RTE_Device.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_ecspi_cmsis.c"/>
      </source>
      <source path="devices/MIMX8MM6/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ecspi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.ii2c_cmsis.MIMX8MM6" name="i2c_cmsis" brief="I2C CMSIS Driver" version="2.0.0" full_name="II2C CMSIS Driver" devices="MIMX8MM6xxxLZ" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.ii2c.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="RTE_Device.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_cmsis.c"/>
      </source>
      <source path="devices/MIMX8MM6/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.iuart_sdma_cmsis.MIMX8MM6" name="uart_sdma_cmsis" brief="UART CMSIS SDMA Driver" version="2.0.0" full_name="IUART CMSIS SDMA Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.iuart_sdma.MIMX8MM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMX8MM6"/>
          <component_dependency value="RTE_Device.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_uart_cmsis.c"/>
      </source>
      <source path="devices/MIMX8MM6/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart_cmsis.h"/>
      </source>
    </component>
    <component id="driver.codec.MIMX8MM6" name="codec" brief="Driver codec" version="2.2.0" full_name="Driver codec" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
          <any_of>
            <component_dependency value="component.wm8524_adapter.MIMX8MM6"/>
            <component_dependency value="component.codec_ak4497_adapter.MIMX8MM6"/>
            <component_dependency value="component.codec_wm8524_adapter.MIMX8MM6"/>
            <component_dependency value="component.ak4497_adapter.MIMX8MM6"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/codec" target_path="codec" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source path="components/codec" target_path="codec" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MIMX8MM6" name="common" brief="COMMON Driver" version="2.2.4" full_name="COMMON Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MIMX8MM6"/>
          <component_dependency value="device.MIMX8MM6_CMSIS.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.ecspi.MIMX8MM6" name="ecspi" brief="ECSPI Driver" version="2.1.0" full_name="ECSPI Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_ecspi.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ecspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.ecspi_sdma.MIMX8MM6" name="ecspi_sdma" brief="ECSPI SDMA Driver" version="2.0.2" full_name="ECSPI SDMA Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.ecspi.MIMX8MM6"/>
          <component_dependency value="platform.drivers.sdma.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_ecspi_sdma.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ecspi_sdma.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpc_2.MIMX8MM6" name="gpc" brief="GPC Driver" version="2.2.0" full_name="GPC Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpc.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpc.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpt.MIMX8MM6" name="gpt" brief="GPT Driver" version="2.0.2" full_name="GPT Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpt.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpt.h"/>
      </source>
    </component>
    <component id="platform.drivers.igpio.MIMX8MM6" name="gpio" brief="GPIO Driver" version="2.0.3" full_name="igpio" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.ii2c.MIMX8MM6" name="i2c" brief="I2C Driver" version="2.0.6" full_name="I2C Driver" devices="MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.iomuxc.MIMX8MM6" name="iomuxc" brief="IOMUXC Driver" version="2.0.0" full_name="IOMUXC Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_iomuxc.h"/>
      </source>
    </component>
    <component id="platform.drivers.ipwm.MIMX8MM6" name="ipwm" brief="PWM Driver" version="2.0.1" full_name="PWM Driver" devices="MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_pwm.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pwm.h"/>
      </source>
    </component>
    <component id="platform.drivers.iuart.MIMX8MM6" name="iuart" brief="IUART Driver" version="2.1.0" full_name="IUART Driver" devices="MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_uart.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart.h"/>
      </source>
    </component>
    <component id="platform.drivers.iuart_sdma.MIMX8MM6" name="iuart_sdma" brief="IUART SDMA Driver" version="2.1.0" full_name="IUART SDMA Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.iuart.MIMX8MM6"/>
          <component_dependency value="platform.drivers.sdma.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_uart_sdma.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_uart_sdma.h"/>
      </source>
    </component>
    <component id="platform.drivers.memory.MIMX8MM6" name="memory" brief="MEMORY Driver" version="2.0.0" full_name="Memory Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_memory.h"/>
      </source>
    </component>
    <component id="platform.drivers.mu.MIMX8MM6" name="mu" brief="MU Driver" version="2.0.5" full_name="MU Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_mu.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_mu.h"/>
      </source>
    </component>
    <component id="platform.drivers.pdm.MIMX8MM6" name="pdm" brief="PDM Driver" version="2.4.1" full_name="PDM Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_pdm.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pdm.h"/>
      </source>
    </component>
    <component id="platform.drivers.pdm_sdma.MIMX8MM6" name="pdm_sdma" brief="PDM SDMA Driver" version="2.1.2" full_name="PDM SDMA Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.pdm.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_pdm_sdma.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pdm_sdma.h"/>
      </source>
    </component>
    <component id="platform.drivers.rdc.MIMX8MM6" name="rdc" brief="RDC Driver" version="2.1.1" full_name="RDC Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_rdc.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rdc.h"/>
      </source>
    </component>
    <component id="platform.drivers.rdc_sema42.MIMX8MM6" name="rdc_sema42" brief="RDC SEMA42 Driver" version="2.0.3" full_name="RDC SEMA42 Driver" devices="MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_rdc_sema42.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rdc_sema42.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai.MIMX8MM6" name="sai" brief="SAI Driver" version="2.3.1" full_name="SAI Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai_sdma.MIMX8MM6" name="sai_sdma" brief="SAI SDMA Driver" version="2.3.1" full_name="SAI SDMA Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.sai.MIMX8MM6"/>
          <component_dependency value="platform.drivers.sdma.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai_sdma.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai_sdma.h"/>
      </source>
    </component>
    <component id="platform.drivers.sdma.MIMX8MM6" name="sdma" brief="SDMA Driver" version="2.3.2" full_name="SDMA Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.memory.MIMX8MM6"/>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_sdma.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sdma.h"/>
        <files mask="fsl_sdma_script.h"/>
      </source>
    </component>
    <component id="platform.drivers.sema4.MIMX8MM6" name="sema4" brief="SEMA4 Driver" version="2.0.2" full_name="SEMA4 Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_sema4.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sema4.h"/>
      </source>
    </component>
    <component id="driver.srtm.MIMX8MM6" name="srtm" brief="Driver srtm" version="1.0.0" full_name="Driver srtm" devices="MIMX8MM6xxxLZ" user_visible="true" type="software_component">
      <source path="components/srtm/include" target_path="srtm/include" type="c_include">
        <files mask="srtm_channel.h"/>
        <files mask="srtm_defs.h"/>
        <files mask="srtm_dispatcher.h"/>
        <files mask="srtm_message.h"/>
        <files mask="srtm_peercore.h"/>
        <files mask="srtm_service.h"/>
      </source>
      <source path="components/srtm/port" target_path="srtm/port" type="src">
        <files mask="srtm_message_pool.c"/>
      </source>
      <source path="components/srtm/srtm" target_path="srtm/srtm" type="src">
        <files mask="srtm_channel.c"/>
        <files mask="srtm_dispatcher.c"/>
        <files mask="srtm_message.c"/>
        <files mask="srtm_peercore.c"/>
        <files mask="srtm_service.c"/>
      </source>
      <source path="components/srtm/srtm" target_path="srtm/srtm" type="c_include">
        <files mask="srtm_channel_struct.h"/>
        <files mask="srtm_dispatcher_struct.h"/>
        <files mask="srtm_heap.h"/>
        <files mask="srtm_list.h"/>
        <files mask="srtm_message_pool.h"/>
        <files mask="srtm_message_struct.h"/>
        <files mask="srtm_mutex.h"/>
        <files mask="srtm_peercore_struct.h"/>
        <files mask="srtm_sem.h"/>
        <files mask="srtm_service_struct.h"/>
      </source>
    </component>
    <component id="driver.srtm.freertos.MIMX8MM6" name="freertos" brief="Driver srtm freertos" version="1.0.0" full_name="Driver srtm freertos" devices="MIMX8MM6xxxLZ" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="driver.srtm.MIMX8MM6"/>
      </dependencies>
      <source path="components/srtm/port" target_path="srtm/port" type="src">
        <files mask="srtm_heap_freertos.c"/>
        <files mask="srtm_mutex_freertos.c"/>
        <files mask="srtm_sem_freertos.c"/>
      </source>
    </component>
    <component id="platform.drivers.tmu_1.MIMX8MM6" name="tmu" brief="TMU Driver" version="2.1.0" full_name="TMU Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_tmu.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tmu.h"/>
      </source>
    </component>
    <component id="platform.drivers.wdog01.MIMX8MM6" name="wdog" brief="wdog01 Driver" version="2.1.1" full_name="wdog01 Driver" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="src">
        <files mask="fsl_wdog.c"/>
      </source>
      <source path="devices/MIMX8MM6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wdog.h"/>
      </source>
    </component>
    <component id="driver.wm8524.MIMX8MM6" name="wm8524" brief="Driver wm8524" version="2.1.0" full_name="Driver wm8524" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8MM6"/>
      </dependencies>
      <source path="components/codec/wm8524" target_path="codec" type="src">
        <files mask="fsl_wm8524.c"/>
      </source>
      <source path="components/codec/wm8524" target_path="codec" type="c_include">
        <files mask="fsl_wm8524.h"/>
      </source>
    </component>
    <component id="middleware.baremetal.MIMX8MM6" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="MIMX8MM6xxxLZ" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.multicore.MIMX8MM6" name="multicore middleware" brief="Multicore SDK" version="2.8.0" full_name="Multicore Software Development Kit" devices="MIMX8MM6xxxLZ" user_visible="true" type="other">
      <source path="middleware/multicore" target_path="multicore" type="doc">
        <files mask="ChangeLogKSDK.txt" hidden="true"/>
        <files mask="readme.txt" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.remoteproc.loadscript.MIMX8MM6" name="remoteproc_load_script" brief="remoteproc-load script" version="1.0.0" full_name="remoteproc-load script" devices="MIMX8MM6xxxLZ" user_visible="true" type="other">
      <source path="middleware/multicore/tools/remoteproc-load" target_path="multicore/tools/remoteproc-load" type="other">
        <files mask="Readme.md"/>
        <files mask="remote.cfg"/>
      </source>
      <source path="middleware/multicore/tools/remoteproc-load" target_path="multicore/tools/remoteproc-load" type="script">
        <files mask="load.sh"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.MIMX8MM6" name="rpmsg_lite" brief="RPMsg-Lite" version="3.1.0" full_name="Remote Procedure Messaging Lite library" devices="MIMX8MM6xxxLZ" category="Multicore/RPMsg-Lite" user_visible="false" type="middleware">
      <source path="middleware/multicore/rpmsg_lite/doc" target_path="rpmsg_lite/doc" type="image">
        <files mask="arrowdown.png" hidden="true"/>
        <files mask="arrowright.png" hidden="true"/>
        <files mask="bc_s.png" hidden="true"/>
        <files mask="bdwn.png" hidden="true"/>
        <files mask="closed.png" hidden="true"/>
        <files mask="doc.png" hidden="true"/>
        <files mask="doxygen.png" hidden="true"/>
        <files mask="folderclosed.png" hidden="true"/>
        <files mask="folderopen.png" hidden="true"/>
        <files mask="nav_f.png" hidden="true"/>
        <files mask="nav_g.png" hidden="true"/>
        <files mask="nav_h.png" hidden="true"/>
        <files mask="nxp_logo_small.png" hidden="true"/>
        <files mask="open.png" hidden="true"/>
        <files mask="rpmsg_isoosi.png" hidden="true"/>
        <files mask="rpmsg_lite_arch.png" hidden="true"/>
        <files mask="rpmsg_lite_send_receive.png" hidden="true"/>
        <files mask="splitbar.png" hidden="true"/>
        <files mask="sync_off.png" hidden="true"/>
        <files mask="sync_on.png" hidden="true"/>
        <files mask="tab_a.png" hidden="true"/>
        <files mask="tab_b.png" hidden="true"/>
        <files mask="tab_h.png" hidden="true"/>
        <files mask="tab_s.png" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc" target_path="rpmsg_lite/doc" type="doc">
        <files mask="customdoxygen.css" hidden="true"/>
        <files mask="dir_5a30104352ef4255dc24354b02eb2d20.html" hidden="true"/>
        <files mask="dir_97aefd0d527b934f1d99a682da8fe6a9.html" hidden="true"/>
        <files mask="doxygen.css" hidden="true"/>
        <files mask="group__config.html" hidden="true"/>
        <files mask="group__rpmsg__lite.html" hidden="true"/>
        <files mask="group__rpmsg__ns.html" hidden="true"/>
        <files mask="group__rpmsg__queue.html" hidden="true"/>
        <files mask="index.html" hidden="true"/>
        <files mask="modules.html" hidden="true"/>
        <files mask="navtree.css" hidden="true"/>
        <files mask="rpmsg__default__config_8h.html" hidden="true"/>
        <files mask="rpmsg__default__config_8h_source.html" hidden="true"/>
        <files mask="rpmsg__lite_8h_source.html" hidden="true"/>
        <files mask="rpmsg__ns_8h_source.html" hidden="true"/>
        <files mask="rpmsg__queue_8h_source.html" hidden="true"/>
        <files mask="tabs.css" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc" target_path="rpmsg_lite/doc" type="script">
        <files mask="dynsections.js" hidden="true"/>
        <files mask="group__config.js" hidden="true"/>
        <files mask="group__rpmsg__lite.js" hidden="true"/>
        <files mask="group__rpmsg__ns.js" hidden="true"/>
        <files mask="group__rpmsg__queue.js" hidden="true"/>
        <files mask="jquery.js" hidden="true"/>
        <files mask="modules.js" hidden="true"/>
        <files mask="navtree.js" hidden="true"/>
        <files mask="navtreedata.js" hidden="true"/>
        <files mask="navtreeindex0.js" hidden="true"/>
        <files mask="resize.js" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc/search" target_path="rpmsg_lite/doc" type="doc">
        <files mask="all_0.html" hidden="true"/>
        <files mask="all_1.html" hidden="true"/>
        <files mask="all_2.html" hidden="true"/>
        <files mask="all_3.html" hidden="true"/>
        <files mask="all_4.html" hidden="true"/>
        <files mask="all_5.html" hidden="true"/>
        <files mask="all_6.html" hidden="true"/>
        <files mask="all_7.html" hidden="true"/>
        <files mask="classes_0.html" hidden="true"/>
        <files mask="files_0.html" hidden="true"/>
        <files mask="functions_0.html" hidden="true"/>
        <files mask="groups_0.html" hidden="true"/>
        <files mask="nomatches.html" hidden="true"/>
        <files mask="pages_0.html" hidden="true"/>
        <files mask="search.css" hidden="true"/>
        <files mask="typedefs_0.html" hidden="true"/>
        <files mask="variables_0.html" hidden="true"/>
        <files mask="variables_1.html" hidden="true"/>
        <files mask="variables_2.html" hidden="true"/>
        <files mask="variables_3.html" hidden="true"/>
        <files mask="variables_4.html" hidden="true"/>
        <files mask="variables_5.html" hidden="true"/>
        <files mask="variables_6.html" hidden="true"/>
        <files mask="variables_7.html" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc/search" target_path="rpmsg_lite/doc" type="script">
        <files mask="all_0.js" hidden="true"/>
        <files mask="all_1.js" hidden="true"/>
        <files mask="all_2.js" hidden="true"/>
        <files mask="all_3.js" hidden="true"/>
        <files mask="all_4.js" hidden="true"/>
        <files mask="all_5.js" hidden="true"/>
        <files mask="all_6.js" hidden="true"/>
        <files mask="all_7.js" hidden="true"/>
        <files mask="classes_0.js" hidden="true"/>
        <files mask="files_0.js" hidden="true"/>
        <files mask="functions_0.js" hidden="true"/>
        <files mask="groups_0.js" hidden="true"/>
        <files mask="pages_0.js" hidden="true"/>
        <files mask="search.js" hidden="true"/>
        <files mask="searchdata.js" hidden="true"/>
        <files mask="typedefs_0.js" hidden="true"/>
        <files mask="variables_0.js" hidden="true"/>
        <files mask="variables_1.js" hidden="true"/>
        <files mask="variables_2.js" hidden="true"/>
        <files mask="variables_3.js" hidden="true"/>
        <files mask="variables_4.js" hidden="true"/>
        <files mask="variables_5.js" hidden="true"/>
        <files mask="variables_6.js" hidden="true"/>
        <files mask="variables_7.js" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc/search" target_path="rpmsg_lite/doc" type="image">
        <files mask="close.png" hidden="true"/>
        <files mask="mag_sel.png" hidden="true"/>
        <files mask="search_l.png" hidden="true"/>
        <files mask="search_m.png" hidden="true"/>
        <files mask="search_r.png" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/common" target_path="rpmsg_lite" type="src">
        <files mask="llist.c"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/include" target_path="rpmsg_lite" type="c_include">
        <files mask="llist.h"/>
        <files mask="rpmsg_compiler.h"/>
        <files mask="rpmsg_default_config.h"/>
        <files mask="rpmsg_lite.h"/>
        <files mask="rpmsg_ns.h"/>
        <files mask="virtio_ring.h"/>
        <files mask="virtqueue.h"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite" target_path="rpmsg_lite" type="src">
        <files mask="rpmsg_lite.c"/>
        <files mask="rpmsg_ns.c"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/virtio" target_path="rpmsg_lite" type="src">
        <files mask="virtqueue.c"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite" target_path="rpmsg_lite" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.bm.MIMX8MM6" name="rpmsg_lite_bm_env" brief="RPMsg-Lite_baremetal_env" version="3.1.0" full_name="RPMsg-Lite baremetal environment layer" devices="MIMX8MM6xxxLZ" category="Multicore/RPMsg-Lite BM" user_visible="false" type="middleware">
      <dependencies>
        <component_dependency value="middleware.multicore.rpmsg_lite.MIMX8MM6"/>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/lib/include" target_path="rpmsg_lite/env/bm" type="c_include">
        <files mask="rpmsg_env.h"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite/porting/environment" target_path="rpmsg_lite/env/bm" type="src">
        <files mask="rpmsg_env_bm.c"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.bm.config.MIMX8MM6" name="rpmsg_lite_bm_config" brief="RPMsg-Lite_bm_config" version="3.1.0" full_name="RPMsg-Lite BM configuration" devices="MIMX8MM6xxxLZ" category="Multicore/RPMsg-Lite BM" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.multicore.rpmsg_lite.MIMX8MM6"/>
          <component_dependency value="middleware.multicore.rpmsg_lite.bm.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/template_application" target_path="source" type="c_include">
        <files mask="rpmsg_config.h"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.freertos.MIMX8MM6" name="rpmsg_lite_freertos_env" brief="RPMsg-Lite_freertos_env" version="3.1.0" full_name="RPMsg-Lite FreeRTOS environment layer" devices="MIMX8MM6xxxLZ" category="Multicore/RPMsg-Lite FreeRTOS" user_visible="false" type="middleware">
      <dependencies>
        <component_dependency value="middleware.multicore.rpmsg_lite.MIMX8MM6"/>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/lib/include" target_path="rpmsg_lite/env/freertos" type="c_include">
        <files mask="rpmsg_env.h"/>
        <files mask="rpmsg_queue.h"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite/porting/environment" target_path="rpmsg_lite/env/freertos" type="src">
        <files mask="rpmsg_env_freertos.c"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite" target_path="rpmsg_lite/env/freertos" type="src">
        <files mask="rpmsg_queue.c"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.freertos.config.MIMX8MM6" name="rpmsg_lite_freertos_config" brief="RPMsg-Lite_freertos_config" version="3.1.0" full_name="RPMsg-Lite FreeRTOS configuration" devices="MIMX8MM6xxxLZ" category="Multicore/RPMsg-Lite FreeRTOS" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.multicore.rpmsg_lite.MIMX8MM6"/>
          <component_dependency value="middleware.multicore.rpmsg_lite.freertos.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/template_application" target_path="source" type="c_include">
        <files mask="rpmsg_config.h"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.imx8mm_m4_bm.MIMX8MM6" name="rpmsg_lite_imx8mm_m4_bm" brief="RPMsg-Lite_evkmimx8mm_porting_layer" version="3.1.0" full_name="Remote Procedure Messaging Lite porting layer for evkmimx8mm board" devices="MIMX8MM6xxxLZ" category="Multicore/RPMsg-Lite BM" user_visible="true" type="middleware">
      <dependencies>
        <component_dependency value="middleware.multicore.rpmsg_lite.bm.MIMX8MM6"/>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/lib/include/platform/imx8mm_m4" target_path="rpmsg_lite/porting" type="c_include">
        <files mask="rpmsg_platform.h"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite/porting/platform/imx8mm_m4" target_path="rpmsg_lite/porting" type="src">
        <files mask="rpmsg_platform.c"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MIMX8MM6" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="MIMX8MM6xxxLZ" user_visible="true" type="utilities">
      <source toolchain="armgcc" path="devices/MIMX8MM6/utilities" target_path="utilities" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MIMX8MM6" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MIMX8MM6"/>
      </dependencies>
      <source path="devices/MIMX8MM6/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MIMX8MM6" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="MIMX8MM6xxxLZ" device_cores="cm4_MIMX8MM6xxxLZ" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MIMX8MM6"/>
          <component_dependency value="platform.drivers.common.MIMX8MM6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8MM6/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MIMX8MM6/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/MIMX8MM6/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MIMX8MM6/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
